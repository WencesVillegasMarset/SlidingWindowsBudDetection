import pandas as pd
import matplotlib.pyplot as plt
import os
import cv2
import numpy as np
import argparse

def run(args):

    csv_path = args.csv

    csv = pd.read_csv(csv_path)
    model_foldername = os.path.split(csv_path)[1][0:-4]
    print('Generatin masks for ' + model_foldername)
    IMAGES_PATH = '/home/wences/Documents/src/images/images/'
    PROJECTIONS_PATH = os.path.join('.', 'output', model_foldername, 'projections/')
    MASKS_PATH = os.path.join('.','output', model_foldername, 'masks/')
    ARRAYS_PATH = os.path.join('.','output', model_foldername, 'vote_arrays/')
    BINARY_MASK_PATH = os.path.join('.','output', model_foldername, 'binary_masks/')
    for directory in [PROJECTIONS_PATH, MASKS_PATH, ARRAYS_PATH, BINARY_MASK_PATH]:
        os.makedirs(directory)

    positive_patches = csv.loc[csv['svm_result'] > 0.5,:]

    list_positive_images = positive_patches['image_name'].unique()

    #for image_name in list_positive_images:
    #    patches_from_image = positive_patches.loc[positive_patches['image_name'] == image_name,:]
    #    img = cv2.cvtColor(cv2.imread(IMAGES_PATH + image_name), cv2.COLOR_BGR2RGB)
    #    for idx, row in patches_from_image.iterrows():
    #        cv2.rectangle(img,(row['top_left_corner_y'],row['top_left_corner_x']),(row['top_left_corner_y']+300,row['top_left_corner_x']+300),(0,255,0),int(row['svm_result']*35))
    #    cv2.imwrite(PROJECTIONS_PATH + 'sw_'+ image_name, img)

    for image_name in list_positive_images:
        patches_from_image = positive_patches.loc[positive_patches['image_name'] == image_name,:]
        img = cv2.cvtColor(cv2.imread(IMAGES_PATH + image_name), cv2.COLOR_BGR2RGB)
        mask = np.zeros_like(img[:,:,0])
        for idx, row in patches_from_image.iterrows():
            x = row['top_left_corner_x']
            y = row['top_left_corner_y']
            mask[x:x+300,y:y+300] += 1
            #cv2.rectangle(img,(row['top_left_corner_x'],row['top_left_corner_y']),(row['top_left_corner_x']+300,row['top_left_corner_y']+300),(0,255,0),20)
        cv2.imwrite(MASKS_PATH + 'mask_sw_'+ image_name, cv2.normalize(mask,None,0,255,cv2.NORM_MINMAX))

    for image_name in list_positive_images:
        patches_from_image = positive_patches.loc[positive_patches['image_name'] == image_name,:]
        img = cv2.cvtColor(cv2.imread(IMAGES_PATH + image_name), cv2.COLOR_BGR2RGB)
        mask = np.zeros_like(img[:,:,0])
        for idx, row in patches_from_image.iterrows():
            x = row['top_left_corner_x']
            y = row['top_left_corner_y']
            mask[x:x+300,y:y+300] += 1
        np.save(ARRAYS_PATH + 'mask_sw_'+ image_name[0:4]+'.npy', mask)

    npy_mask = os.listdir(ARRAYS_PATH)
    npy_mask = sorted(npy_mask)

    for npy_array in npy_mask:
        mask = np.load(ARRAYS_PATH + npy_array)
        mask[mask<3] = 0
        mask = np.uint8(mask.astype(bool))
        cv2.imwrite(BINARY_MASK_PATH + 'bin_' + npy_array[0:-4] + '.jpg', mask)


def main():
    parser = argparse.ArgumentParser(
        description="Run resulting mask generation for sliding windows detection csv report on bud images")
    parser.add_argument("-csv", help="csv containing the report generated by main.py",
                        dest="csv", type=str, required=True)

    parser.set_defaults(func=run)

    args = parser.parse_args()

    if (not os.path.exists(args.csv)):
        parser.error('Invalid path to csv')
    
    args.func(args)


if __name__ == "__main__":
    main()